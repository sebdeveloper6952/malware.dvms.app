import { malwareScanningResultKind } from '@lib/nostr/kinds';
import NDK, { NDKEvent, type NostrEvent } from '@nostr-dev-kit/ndk';
import { Nip90JobRequestEvent } from '@lib/models/Nip90JobRequest';

export class Nip90JobResultEvent extends NDKEvent {
	status: string = '';
	statusExtraInfo: string = '';
	amountMsat: number = 0;
	paymentRequest: string = '';
	jobRequestEvent?: Nip90JobRequestEvent;

	res?: string;
	extra?: Map<string, string[]>;

	constructor(ndk?: NDK, rawEvent?: NostrEvent) {
		super(ndk, rawEvent);

		if (rawEvent && rawEvent.kind === malwareScanningResultKind) {
			const content = JSON.parse(rawEvent.content);
			if (content.res) {
				this.res = content.res;
			}
			if (content.info) {
				this.extra = new Map<string, string[]>();
				for (const key of Object.keys(content.info)) {
					this.extra.set(key, content.info[key]);
				}
			}
		}

		const inputEventTag = rawEvent?.tags.find((t) => t[0] == 'request');
		if (inputEventTag && inputEventTag[1]) {
			const inputEvent = JSON.parse(inputEventTag[1]) as NostrEvent;
			this.jobRequestEvent = Nip90JobRequestEvent.from(new NDKEvent(ndk, inputEvent));
		}

		rawEvent?.tags.forEach((tag) => {
			if (tag[0] === 'status') {
				this.status = tag[1] ?? '';
				this.statusExtraInfo = tag[2] ?? '';
			} else if (tag[0] === 'amount') {
				this.amountMsat = Number(tag[1] ?? 0);
				this.paymentRequest = tag[2] ?? '';
			}

			if (rawEvent.kind === malwareScanningResultKind) {
				this.status = 'result';
			}
		});
	}

	static from(ndkEvent: NDKEvent) {
		return new Nip90JobResultEvent(ndkEvent.ndk, ndkEvent.rawEvent());
	}

	async init() {
		await this.author.fetchProfile();
		await this.jobRequestEvent?.author.fetchProfile();
	}
}
