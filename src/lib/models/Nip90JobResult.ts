import {
	applicationHandlerKind,
	malwareScanningRequestKind,
	malwareScanningResultKind
} from '@lib/nostr/kinds';
import NDK, { NDKEvent, NDKKind, type NDKUserProfile, type NostrEvent } from '@nostr-dev-kit/ndk';
import { ndk } from '@nostr/ndk';
import { DVMJobRequestEvent } from '@lib/models/Nip90JobRequest';

export class DVMJobResultEvent extends NDKEvent {
	jobRequestEvent?: DVMJobRequestEvent;
	permissions?: string[];
	certificate?: string[][];

	constructor(ndk?: NDK, rawEvent?: NostrEvent) {
		super(ndk, rawEvent);

		const inputEventTag = rawEvent?.tags.find((t) => t[0] == 'request');
		if (inputEventTag && inputEventTag[1]) {
			const inputEvent = JSON.parse(inputEventTag[1]) as NostrEvent;
			this.jobRequestEvent = DVMJobRequestEvent.from(new NDKEvent(ndk, inputEvent));
		}

		this.permissions = rawEvent?.tags.filter((t) => t[0] === 'pm').map((t) => t[1]);
		this.certificate = rawEvent?.tags.filter((t) => t[0] === 'c').map((t) => [t[1], t[2]]);
	}

	static from(ndkEvent: NDKEvent) {
		return new DVMJobResultEvent(ndkEvent.ndk, ndkEvent.rawEvent());
	}

	async init() {
		await this.author.fetchProfile();
		await this.jobRequestEvent?.author.fetchProfile();
	}
}
