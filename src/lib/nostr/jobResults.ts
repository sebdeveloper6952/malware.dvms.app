import {
	applicationHandlerKind,
	malwareScanningRequestKind,
	malwareScanningResultKind
} from '@lib/nostr/kinds';
import NDK, { NDKEvent, NDKKind, type NDKUserProfile, type NostrEvent } from '@nostr-dev-kit/ndk';
import { ndk } from '@nostr/ndk';

export class DVMInput {
	value: string;
	type: string;
	relay?: string;
	marker?: string;

	constructor(tag: string[]) {
		this.value = tag[1];
		this.type = tag[2];
		this.relay = tag[3] ?? undefined;
		this.marker = tag[4] ?? undefined;
	}
}

export class DVMJobRequestEvent extends NDKEvent {
	inputs: DVMInput[] = [];

	constructor(ndk?: NDK, rawEvent?: NostrEvent) {
		super(ndk, rawEvent);

		const inputs = rawEvent?.tags.filter((t) => t[0] === 'i');
		if (inputs) this.inputs = inputs?.map((i) => new DVMInput(i));
	}

	static from(ndkEvent: NDKEvent) {
		return new DVMJobRequestEvent(ndkEvent.ndk, ndkEvent.rawEvent());
	}
}

export class DVMJobResultEvent extends NDKEvent {
	jobRequestEvent?: DVMJobRequestEvent;

	constructor(ndk?: NDK, rawEvent?: NostrEvent) {
		super(ndk, rawEvent);

		const inputEventTag = rawEvent?.tags.find((t) => t[0] == 'request');
		if (inputEventTag && inputEventTag[1]) {
			const inputEvent = JSON.parse(inputEventTag[1]) as NostrEvent;
			this.jobRequestEvent = DVMJobRequestEvent.from(new NDKEvent(ndk, inputEvent));
		}
	}

	static from(ndkEvent: NDKEvent) {
		return new DVMJobResultEvent(ndkEvent.ndk, ndkEvent.rawEvent());
	}

	async init() {
		await this.author.fetchProfile();
		await this.jobRequestEvent?.author.fetchProfile();
	}
}

export const jobResultStore = ndk.storeSubscribe(
	[
		{
			kinds: [malwareScanningResultKind],
			since: Math.round((Date.now() - 24 * 60 * 60 * 1000) / 1000)
		}
	],
	{
		closeOnEose: true,
		autoStart: false
	},
	DVMJobResultEvent
);
