import NDK, { NDKEvent, NDKKind, type NostrEvent } from '@nostr-dev-kit/ndk';
import { ndk } from './ndk';
import { malwareScanningRequestKind, malwareScanningResultKind } from './kinds';

export class NIP90Event extends NDKEvent {
	status: string = '';
	statusExtraInfo: string = '';
	amountMsat: number = 0;
	paymentRequest: string = '';

	constructor(ndk?: NDK, rawEvent?: NostrEvent) {
		super(ndk, rawEvent);

		rawEvent?.tags.forEach((tag) => {
			if (tag[0] === 'status') {
				this.status = tag[1] ?? '';
				this.statusExtraInfo = tag[2] ?? '';
			} else if (tag[0] === 'amount') {
				this.amountMsat = Number(tag[1] ?? 0);
				this.paymentRequest = tag[2] ?? '';
			}

			if (rawEvent.kind === malwareScanningResultKind) {
				this.status = 'result';
			}
		});
	}

	static from(ndkEvent: NDKEvent) {
		return new NIP90Event(ndkEvent.ndk, ndkEvent.rawEvent());
	}
}

export const publishJobRequestEvent = async (
	input: string,
	pks: string[],
	bidMsat: number
): Promise<NDKEvent> => {
	const e = new NDKEvent(ndk);
	e.kind = malwareScanningRequestKind;
	e.tags = [['i', input, 'url'], ['bid', bidMsat.toString()], ...pks.map((pk) => ['p', pk])];
	await e.publish();

	return e;
};

export const publishCustomerFeedbackEvent = async (
	content: string,
	feedback: string,
	jobResultEventId: string,
	dvmPubkey: string,
	resultKind: NDKKind
): Promise<NDKEvent> => {
	const e = new NDKEvent(ndk);
	e.kind = 7;
	e.content = content;
	e.tags = [
		['feedback', feedback],
		['e', jobResultEventId],
		['p', dvmPubkey],
		['k', resultKind.toString()]
	];
	await e.publish();

	return e;
};
