import { NDKPrivateKeySigner } from '@nostr-dev-kit/ndk';
import { get, writable } from 'svelte/store';
import type { NDKUser } from '@nostr-dev-kit/ndk';
import { nip19 } from 'nostr-tools';
import { persisted } from 'svelte-persisted-store';
import { ndk } from './ndk';
import { buf2hex } from '@lib/helpers/buf2hex';

const skStorage = persisted('sk', '');
export const userStore = writable<NDKUser | null>();

const initSigner = async (sk: string) => {
	let p: string = sk;

	try {
		let { type, data } = nip19.decode(sk);
		if (type === 'nsec') {
			p = buf2hex(data as Uint8Array);
		}
	} catch (e) {}

	const signer = new NDKPrivateKeySigner(p);
	ndk.signer = signer;

	const user = await signer.blockUntilReady();
	ndk.activeUser = user;

	userStore.set(user);
	skStorage.set(p);
};

export const setSk = async (sk: string) => {
	await initSigner(sk);
};

export const logout = () => {
	ndk.signer = undefined;
	ndk.activeUser = undefined;
	userStore.set(null);
	skStorage.set('');
};

const init = async () => {
	let sk = get(skStorage);
	if (sk !== '') {
		await initSigner(sk);
	}
};

await init();
