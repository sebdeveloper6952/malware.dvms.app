import { applicationHandlerKind, malwareScanningRequestKind } from '@lib/nostr/kinds';
import NDK, { NDKEvent, NDKKind, type NDKUserProfile, type NostrEvent } from '@nostr-dev-kit/ndk';
import { ndk } from '@nostr/ndk';

export class NDKAppHandlerEvent extends NDKEvent {
	profile: NDKUserProfile | null | undefined;
	likesPercent = 0;

	constructor(ndk?: NDK, rawEvent?: NostrEvent) {
		super(ndk, rawEvent);
		this.kind ??= NDKKind.AppHandler;
	}

	static from(ndkEvent: NDKEvent) {
		return new NDKAppHandlerEvent(ndkEvent.ndk, ndkEvent.rawEvent());
	}

	async fetchProfile(): Promise<NDKUserProfile | undefined> {
		if (this.profile === undefined && this.content.length > 0) {
			try {
				const profile = JSON.parse(this.content);

				// make sure there is something
				if (profile && profile.name) {
					const p = profile as NDKUserProfile;

					return p;
				} else {
					this.profile = null;
				}
			} catch (e) {
				this.profile = null;
			}
		}

		return new Promise((resolve, reject) => {
			const author = this.author;
			author
				.fetchProfile()
				.then(() => {
					resolve(author.profile);
				})
				.catch(reject);
		});
	}

	async computeLikesPercent(): Promise<number> {
		const jobResultsEvents = await ndk.fetchEvents({
			authors: [this.author.pubkey],
			kinds: [6500 as NDKKind]
		});

		const eIds = Array.from(jobResultsEvents!).map((e) => e.id);
		const pk = [this.author.pubkey];

		const jobFeedbackEvents = await ndk.fetchEvents({
			kinds: [NDKKind.Reaction],
			'#e': eIds,
			'#p': pk
		});

		const e = Array.from(jobFeedbackEvents!);
		const liked = e.filter((e) => e.content === '+').length ?? 0;
		const notLiked = e.filter((e) => e.content === '-').length ?? 0;
		const total = liked + notLiked;
		if (total === 0) return Promise.resolve(0);
		return Promise.resolve(Math.round((liked / total) * 100));
	}
}

export const nip89Store = ndk.storeSubscribe(
	[{ kinds: [applicationHandlerKind as NDKKind], '#k': [malwareScanningRequestKind.toString()] }],
	{ closeOnEose: false, autoStart: false },
	NDKAppHandlerEvent
);
