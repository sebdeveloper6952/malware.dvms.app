import { ndk } from '@lib/nostr/ndk';
import { writable, type Subscriber } from 'svelte/store';
import type { NDKEvent } from '@nostr-dev-kit/ndk';
import { Nip90JobResultEvent } from '@lib/models/Nip90JobResult';
import { jobFeedbackKind, malwareScanningResultKind } from '@lib/nostr/kinds';

export const jobRequestUpdatesStore = (eventId: string) => {
	let state = new Map<string, Nip90JobResultEvent[]>();
	let store = writable(state);

	const filter = { kinds: [malwareScanningResultKind, jobFeedbackKind], '#e': [eventId] };
	const sub = ndk.subscribe(filter, {
		closeOnEose: false
	});

	sub.on('event', (e: NDKEvent) => {
		if (!state.has(e.author.pubkey)) {
			state.set(e.author.pubkey, []);
		}

		state.get(e.author.pubkey)?.push(Nip90JobResultEvent.from(e));
		store.set(state);
	});

	const subscribe = (run: Subscriber<Map<string, Nip90JobResultEvent[]>>): (() => void) => {
		store.subscribe(run);
		return unsubscribe;
	};

	const unsubscribe = () => {
		setTimeout(() => {
			sub.stop();
		}, 1000);
	};

	return {
		subscribe: subscribe,
		set: store.set,
		update: store.update
	};
};
